openapi: 3.0.3
info:
  title: Rejstracja do systemu erasmus - OpenAPI 3.0
  description: |-
    Rejestracja do systemu Erasmus 
    - API służące do rejestracji studentów w systemie Erasmus.
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1-SNAPSHOT
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8080
tags:
  - name: UserContextSecurity
    description: Everything about security in the user context
  - name: Application
    description: Submission of documents for the trip
  - name: Universities
    description: All stuff about universities


paths:
  /api/auth/register:
    post:
      tags:
        - UserContextSecurity
      summary: Sign Up to the system
      description: Create user account
      operationId: createAccount
      requestBody:
        description: Filled form of user account
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpForm'
        required: true
      responses:
        '200':
          description: User registered successfully!
        '400':
          description: Bad Request - Invalid input data.
        '500':
          description: Internal server error - Unable to create user account.

  /api/auth/authenticate:
    post:
      tags:
        - UserContextSecurity
      summary: Log in to the system
      description: Authenticate user credentials and return user information with jwt
      operationId: authenticateUser
      requestBody:
        description: User credentials for authentication
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/SignInForms'
      responses:
        '200':
          description: Authentication successful, returns access token.
          content:
            application/json:
              schema:
                type: object
                $ref: '#components/schemas/AuthTokenResponseModel'
        '401':
          description: Unauthorized - Invalid user credentials.
        '500':
          description: Internal server error - Unable to authenticate user.

  /api/auth/refreshToken:
    post:
      tags:
        - UserContextSecurity
      summary: Refresh the main token
      operationId: refreshingToken
      requestBody:
        description: RefreshToken to refresh main jwt
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/RefreshTokenRequestModel'
      responses:
        '200':
          description: Successful token refresh
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/RefreshTokenResponseModel'
        '400':
          description: Bad Request - Invalid input data.
        '403':
          description: Session has expired.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                  timestamp:
                    type: string
                  message:
                    type: string
                  description:
                    type: string
        '500':
          description: Internal server error.

  /api/signout:
    post:
      tags:
        - UserContextSecurity
      summary: User sign out
      operationId: sign-outUser
      description: Logout user (JWT required)

      responses:
        '200':
          description: User signed out successfully
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/MessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  path:
                    type: string
                  error:
                    type: string
                  message:
                    type: string
                  status:
                    type: integer

  /api/v1/universities:
    post:
      summary: Create a new university
      description: Endpoint for creating a new university in the system.
      tags:
        - Universities
      requestBody:
        description: University details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UniversityRequest'
      responses:
        '200':
          description: University saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /api/v1/universities/all:
    get:
      tags:
        - Universities
      summary: Get all universities
      description: Retrieve a list of all universities
      operationId: getAllUniversities
      responses:
        '200':
          description: A list of universities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/University'
        '400':
          description: Bad request - Invalid input data
        '500':
          description: Internal server error - Unable to retrieve universities

  /api/v1/application:
    post:
      summary: Add new application
      description: Submission of documents for the trip
      tags:
        - Application
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                applicationRequest:
                  description: Structure of json as in ApplicationRequest schema
                  type: object
                  $ref: '#/components/schemas/ApplicationRequest'
                pdfFiles:
                  type: file
                  format: binary
                  description: List with pdf files
      responses:
        '200':
          description: The application was added correctly
        '400':
          description: Error message


  /api/v1/application/update:
    post:
      summary: Update application status
      tags:
        - Application
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatusUpdateRequest'
      responses:
        '200':
          description: Successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationResponse'
        '400':
          description: Error message

  /api/v1/application/all:
    get:
      tags:
        - Application
      summary: Get all application
      description: Retrieve a list of all application
      responses:
        '200':
          description: A list of applications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApplicationResponse'
        '400':
          description: Bad request - Invalid input data
        '500':
          description: Internal server error - Unable to retrieve universities


  /api/v1/application/{owner_id}:
    get:
      tags:
        - Application
      summary: Get one application using owner id
      description: Retrieve a current application
      parameters:
        - in: path
          name: owner_id
          schema:
            type: string
          required: true
          description: User id to get application
      responses:
        '200':
          description: One application
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationResponse'
        '400':
          description: Bad request - Invalid input data
        '404':
          description: Not found
        '500':
          description: Internal server error - Unable to retrieve universities

  /api/v1/application/{pdf_id}/download:
    get:
      tags:
        - Application
      summary: Download pdf file using id
      description: Retrieve a pdf file
      parameters:
        - in: path
          name: pdf_id
          schema:
            type: string
          required: true
          description: Id of the pdf file
      responses:
        '200':
          description: OK
        '404':
          description: Not found
        '400':
          description: Bad request - Invalid input data
        '500':
          description: Internal server error - Unable to retrieve universities

components:
  schemas:
    SignUpForm:
      type: object
      properties:
        first_name:
          type: string
          description: User's first name
        last_name:
          type: string
          description: User's last name
        email:
          type: string
          format: email
          description: User's email address
        username:
          type: string
          description: User's username for the account
        password:
          type: string
          format: password
          description: User's password for the account
        roles:
          description: List of user's roles
          type: array
          items:
            type: string
      required:
        - first_name
        - last_name
        - email
        - password

    StatusUpdateRequest:
      type: object
      properties:
        applicationId:
          type: string
          description: Application id
        status:
          type: string
          description:  SUBMITTED,  DISCUSSED, APPROVED, REJECTED
      required:
        - applicationId
        - status

    ApplicationRequest:
      type: object
      properties:
        ownerId:
          type: string
          description: Id of the user who submits the documents
        email:
          type: string
          description: user email
        phoneNumber:
          type: string
          description: Student phone number
        universities_ids:
          type: array
          items:
            type: string
          description: Id of the universities the student chose
      required:
        - ownerId
        - email
        - phoneNumber
        - universities_ids


    ApplicationResponse:
      type: object
      properties:
        id:
          type: string
          description: Application id
        applicantName:
          type: string
          description: Applicant name
        applicantSurname:
          type: string
          description: Applicant surname
        phoneNumber:
          type: string
          description: Phone number for the applicant
        email:
          type: string
          description: Email for the applicant
        status:
          type: string
          description: Application status
        creationDate:
          type: string
          format: date
        universities:
          type: array
          items:
            $ref: '#/components/schemas/University'
          description: List of universities a student would like to go to
        files:
          type: array
          items:
            properties:
              file_name:
                type: string
              download_url:
                type: string
          description: List with file name and download url

    University:
      type: object
      properties:
        id:
          type: string
          description: University id
        name:
          type: string
          description: The name of the university
        description:
          type: string
          description: A brief description of the university
        address:
          type: string
          description: The address of the university
        city:
          type: string
          description: The city where the university is located
        country:
          type: string
          description: The country where the university is located
        email:
          type: string
          description: The email address of the university
        phoneNumber:
          type: string
          description: The phone number of the university
        availableLanguages:
          type: array
          items:
            type: string
          description: A list of available languages at the university
      required:
        - name
        - address
        - city
        - country
        - email
        - phoneNumber
        - availableLanguages
        - username
        - roles

    UniversityRequest:
      type: object
      properties:
        name:
          type: string
          description: The name of the university.
        description:
          type: string
          description: The description of the university.
        address:
          type: string
          description: The address of the university.
        city:
          type: string
          description: The city where the university is located.
        country:
          type: string
          description: The country where the university is located.
        email:
          type: string
          format: email
          description: The email address of the university.
        phoneNumber:
          type: string
          description: The phone number of the university.
        availableLanguages:
          type: array
          items:
            type: string
          description: The list of available languages in the university.
      required:
        - name
        - description
        - address
        - city
        - country
        - email
        - phoneNumber
        - availableLanguages

    SignInForms:
      type: object
      properties:
        username:
          type: string
          description: User's username for the account
        password:
          type: string
          description: User's password for the account
      required:
        - username
        - password

    RefreshTokenRequestModel:
      type: object
      properties:
        refreshToken:
          type: string
      required:
        - refreshToken

    RefreshTokenResponseModel:
      type: object
      properties:
        accessToken:
          type: string
          description: Json Web Token to be attached to each request
        refreshToken:
          type: string
          description: Token used to refresh the main token
        tokenType:
          type: string

    MessageResponse:
      type: object
      properties:
        message:
          type: string

    AuthTokenResponseModel:
      type: object
      properties:
        id:
          type: string
          description: User id
        token:
          type: string
          description: Json Web Token to be attached to each request
        refreshToken:
          type: string
          description: Token used to refresh the main token
        first_name:
          type: string
          description: User's first name
        last_name:
          type: string
          description: User's last name
        email:
          type: string
          description: User's email address
        username:
          type: string
          description: User's username for the account
        roles:
          type: array
          items:
            type: string
          description: List of user's roles